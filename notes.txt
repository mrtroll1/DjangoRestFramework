Django Rest Framework

1. Setup the environment, project, git.
2. Define a basic API view with JsonResponse
3. Django model instance as an API response
    a. 'Manual' model --> dict --> JSON
    b. Use Serializers
4. Explore different ways to define views
    a. 'Manually' as functions
    b. As functions that combine methods
    c. As classes inheriting generics and mixins
5. Authentication-required views, permissions
    a. Use sessions authentication and define custom permissions
    b. Implement token authetication 
    c. Override rest_framework default Token model and obtain_token_view to use ExpiringToken 
    d. Create a custom expiringtoken app that overrides rest_framewrok.authtoken 
6. Use mixins for permissions
7. Viewsets and routers
8. Serializers
    a. Add a url (get / retrieve) attribute to every product
    b. Add an email write-only field (not to be stored in the model)
    c. Custom validation (use model validators if request data is not relevant)
    d. Nested serialized data
9. Pagination
10. Search
    a. 'Manually' with a separate django app (separate views)
    b. Build search engine with Algolia (integrate external API service)
        - Create a python client to request searches (inside search app)
11. JSON WEB token auth with simplejwt
12. Login with JavaScript Client
    a. Define a js_client to be served on a different product
    b. Solve CORS blocking issue with django cors headers package
    c. Use JWT with JavaScript client
13. Implement Algolia Search for a JS client